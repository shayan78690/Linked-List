/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || k == 0) {
            return head;
        }

       ListNode tail = head;
       int len = 1;
        while(tail.next != null) {
            tail = tail.next;
            len++;
        } 

        if(k % len == 0) {
            return head;
        }
        
        k = k % len;

        tail.next = head;
        ListNode last = getNthNode(head, len-k);
        head = last.next;
        last.next = null;

        return head;
    }
public ListNode getNthNode(ListNode temp, int k) {
    while (--k > 0) { 
        temp = temp.next;
    }
    return temp;
}

}















/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) {
            return null;
        }

        int length = getLength(head); 
        k = k % length; 
        while (k > 0) {
            ListNode prev = head;
            while(prev.next.next != null) {
                prev = prev.next;
            }
            ListNode last = prev.next;
            prev.next = null;
            last.next = head;
            head = last;

            k--;
        }
        return head;
    }
    private int getLength(ListNode head) {
        int count = 0;
        while (head != null) {
            count++;
            head = head.next;
        }
        return count;
    }
}

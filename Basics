public class LinkedList {

    public static class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) {
        Node newNode = new Node(data);
        size++;
        if(head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);
        size++;
        if(head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public void print() {
        if(head == null) {
            System.out.println("Linked List is Empty");
        }
        Node temp = head;
        
        while(temp != null) {
            System.out.print(temp.data+"->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public void addMiddle(int index, int data) {
        if(index == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);
        size++;
        Node temp = head;
        int i = 0;

        while(i < index-1) {
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    public int removeFirst() {
        if(size == 0) {
            System.out.println("List is Empty");
            return -1;
        } else if (size == 1) {
            int val = head.data;
            head = tail = null;
            size--;
            return val;
        }
        int val = head.data;
        head = head.next;
        size--;

        return val;
    }

    public int removeLast() {

        if(size == 0) {
            System.out.println("Linked List is Empty");
            return -1;
        } else if(size == 1) {
            int val = head.data;
            head = tail = null;
            size = 0;
            return val;
        }
        Node prev = head;
        for(int i = 0; i < size-2; i++) {
            prev = prev.next;
        }
        int val = prev.next.data;
        prev.next = null;
        tail = prev;
        size--;
        return val;
    }

    public int searchKeyIterative(int key) {
        Node temp = head;
        int index = 0;
        while(temp != null) {
            if(temp.data == key) {
                return index; 
            }
            temp = temp.next;
            index++;
        }
        return -1;
    } 

    public int searchKeyRecursive(int key) {
        return helper(head, key, 0);
    }

    public int helper(Node node, int key, int i) {
        if(node == null) {
            return -1;
        }

        if(node.data == key) {
            return i;
        }

        return helper(node.next, key, i+1);
    }

    public void reverse() {
        Node prev = null;
        Node current = tail = head;
        Node next;
        while(current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }

    public int removeNthFromEnd(int n) {
        int index = 1;
        Node temp = head;
        while(index < size-n) {
            temp = temp.next;
            index++;
        }
        int val = temp.next.data;
        temp.next = temp.next.next;
        return val;
    }

    public boolean isPalindrome() {
        if(head == null || head.next == null) {
            return true;
        }

        Node mid = findMid(head);

        Node prev = null;
        Node current  = mid;
        Node next;
        while(current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        Node rightHead = prev;
        Node leftHead = head;

        while(rightHead != null)  {
            if(rightHead.data != leftHead.data) {
                return false;
            }
            leftHead = leftHead.next;
            rightHead = rightHead.next;
        }
        return true;
    }

    public Node findMid(Node head) {
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    
    public static void main(String args[]) {
        LinkedList ll = new LinkedList();
        // ll.head = new Node(1);
        // ll.head.next = new Node(2);
        ll.addFirst(1);
        ll.addFirst(2);
        ll.addFirst(3);
        ll.addFirst(4);
        ll.addFirst(5);
        ll.print();

        ll.addLast(7);
        ll.addLast(10);
        ll.addLast(78);
        ll.print();

        ll.addMiddle(2, 100);
        ll.print();
        System.out.println(ll.size);

        System.out.println(ll.removeFirst());
        System.out.println(ll.removeFirst());
        System.out.println(ll.removeFirst());

        ll.print();
        System.out.println(ll.size);
        
        System.out.println(ll.removeLast());
        System.out.println(ll.size);

        System.out.println(ll.searchKeyIterative(10));
        System.out.println(ll.searchKeyIterative(3));

        ll.print();
        System.out.println(ll.searchKeyRecursive(1));

        ll.reverse();
        ll.print();

        System.out.println(ll.removeNthFromEnd(3));


    }
}

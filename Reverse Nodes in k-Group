/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || k == 1) {
            return head;
        }
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null) {
            ListNode kthNode = getKthNode(temp, k);
            if(kthNode == null) {
                if(prev != null) {
                    prev.next = temp;
                    break;
                }
            }

            ListNode next = kthNode.next;
            kthNode.next = null;
            reverse(temp);

            if(head == temp) {
                head = kthNode;
            } else {
                prev.next = kthNode;
            }
            
            prev = temp;
            temp = next;
        }
        return head;
    }
    public ListNode getKthNode(ListNode temp, int k) {
        k -= 1;
        while(temp != null && k > 0) {
            k--;
            temp = temp.next;
        }
        return temp;
    }
    public ListNode reverse(ListNode head) {
        ListNode current = head;
        ListNode prev = null;
        ListNode next;
        while(current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenhead = head.next;

        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }

        odd.next = evenhead;
        return head;
    }
}






















/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null) return null;
        ArrayList<Integer> list = new ArrayList<>();
        ListNode temp = head;
        while(temp != null && temp.next != null) {
            list.add(temp.val);
            temp = temp.next.next;
        }
        if(temp != null) {
            list.add(temp.val);
        }

        temp = head.next;
        while(temp != null && temp.next != null) {
            list.add(temp.val);
            temp = temp.next.next;
        }
        if(temp != null) {
            list.add(temp.val);
        }

        temp = head;
        int i = 0;
        while(temp != null) {
            temp.val = list.get(i);
            temp = temp.next;
            i++;
        }
        return head;
    }
}

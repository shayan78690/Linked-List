class Solution {
    // Function to flatten a linked list
    Node flatten(Node root) {
        if(root == null || root.next == null) {
            return root;
        }
        
        Node mergedRoot = flatten(root.next);
        return merge(root, mergedRoot);
    }
    
    Node merge(Node l1, Node l2) {
        Node dummy = new Node(-1);
        Node res = dummy;
        while(l1 != null && l2 != null) {
            if(l1.data < l2.data) {
                res.bottom = l1;
                res = l1;
                l1 = l1.bottom;
            } else {
                res.bottom = l2;
                res = l2;
                l2 = l2.bottom;
            }
            res.next = null;
        }
        
        if(l1 != null) {
            res.bottom = l1;
        } else {
            res.bottom = l2;
        }
        return dummy.bottom;
    }
}

















/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;
     public Node child;

     Node()
     {
         this.data = 0;
         this.next = null;
         this.child = null;
     }
     Node(int data)
     {
         this.data = data;
         this.next = null;
         this.child = null;
     }
     Node(int data, Node next, Node child)
     {
         this.data = data;
         this.next = next;
         this.child = child;
     }
 }

 *****************************************************************/
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static Node flattenLinkedList(Node head) {
        if(head == null) {
            return null;
        }
        ArrayList<Integer> list = new ArrayList<>();

        Node temp = head;
        while(temp != null) {
            Node t2 = temp;
            while(t2 != null) {
                list.add(t2.data);
                t2 = t2.child;
            }
            temp = temp.next;
        }
        Collections.sort(list);

        head = convert(list);
        return head;
    }

    public static Node convert(ArrayList<Integer> list) {
        if(list.size() == 0) {
            return null;
        }
        Node head = new Node(list.get(0));
        Node temp = head;
        for(int i = 1; i < list.size(); i++) {
            Node newNode = new Node(list.get(i));
            temp.child = newNode;
            temp = temp.child;
        }
        return head;
    }
}
